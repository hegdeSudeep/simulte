[General]
**.mac.schedulingDisciplineDl = ${scheduler="RANDOM","MAXCI","DRR","PF"}
**.mac.schedulingDisciplineUl = ${scheduler}

**.randomSchedulerBytes = ${randomSchedulerByteRange=500}
**.randomSchedulerSeed = ${repetition}

image-path=../../images
tkenv-plugin-path = ../../../inet/etc/plugins
output-scalar-file-append = false
debug-on-errors = false
tkenv-default-config = 
sim-time-limit=500s
warmup-period=10s
repeat = 1
**.routingRecorder.enabled = false

################ Channel parameters #####################
**.channelControl.pMax = 10W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2100e+6Hz

################ PhyLayer parameters #####################
**.nic.phy.channelModel=xmldoc("config_channel_NoD2Dinterference.xml")
**.feedbackComputation = xmldoc("config_channel_NoD2Dinterference.xml")

################ Mobility parameters #####################
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

################# Deployer parameters #######################
# UEs attached to eNB
**.fbDelay = 1

############### AMC MODULE PARAMETERS ###############
**.rbAllocationType = "localized"
**.deployer.numRbDl = ${resources=25}
**.deployer.numRbUl = ${resources}
**.numBands = ${resources}

[Config MultiplePairs]
network=lte.simulations.networks.SingleCell_D2D

### eNodeBs configuration ###
*.eNodeB.mobility.initFromDisplayString = false
*.eNodeB.mobility.initialX = 300m
*.eNodeB.mobility.initialY = 300m

### UEs configuration ###
*.numUeCell = 0
*.numUeD2DTx = ${numPairs=25}
*.numUeD2DRx = ${numPairs}


*.ue*[*].macCellId = 1
*.ue*[*].masterId = 1
*.ue*[*].mobility.initFromDisplayString = false

# Place D2D endpoints far from the eNodeB (~50m) and close to each other
*.ueD2D*[0].mobility.initialX = 299m
*.ueD2D*[0].mobility.initialY = 299m

#*.ueD2D*[1..].mobility.initialX = uniform(290m,310m)
#*.ueD2D*[1..].mobility.initialY = uniform(340m,350m)

*.ueD2D*[1].mobility.initialX = uniform(290m,310m)
*.ueD2D*[1].mobility.initialY = uniform(340m,350m)

*.ueD2D*[2].mobility.initialX = uniform(200m,210m)
*.ueD2D*[2].mobility.initialY = uniform(200m,250m)

*.ueD2D*[3].mobility.initialX = uniform(210m,220m)
*.ueD2D*[3].mobility.initialY = uniform(240m,270m)

*.ueD2D*[4].mobility.initialX = uniform(230m,270m)
*.ueD2D*[4].mobility.initialY = uniform(200m,250m)

*.ueD2D*[5].mobility.initialX = uniform(240m,270m)
*.ueD2D*[5].mobility.initialY = uniform(240m,270m)

*.ueD2D*[6].mobility.initialX = uniform(250m,300m)
*.ueD2D*[6].mobility.initialY = uniform(250m,250m)

*.ueD2D*[7].mobility.initialX = uniform(300m,320m)
*.ueD2D*[7].mobility.initialY = uniform(340m,350m)

*.ueD2D*[8].mobility.initialX = uniform(350m,370m)
*.ueD2D*[8].mobility.initialY = uniform(340m,350m)

*.ueD2D*[9].mobility.initialX = uniform(370m,370m)
*.ueD2D*[9].mobility.initialY = uniform(340m,380m)

*.ueD2D*[10].mobility.initialX = uniform(240m,260m)
*.ueD2D*[10].mobility.initialY = uniform(240m,300m)

*.ueD2D*[11].mobility.initialX = uniform(270m,320m)
*.ueD2D*[11].mobility.initialY = uniform(270m,350m)

*.ueD2D*[12].mobility.initialX = uniform(290m,310m)
*.ueD2D*[12].mobility.initialY = uniform(290m,310m)

*.ueD2D*[13].mobility.initialX = uniform(320m,330m)
*.ueD2D*[13].mobility.initialY = uniform(380m,330m)

*.ueD2D*[14].mobility.initialX = uniform(290m,310m)
*.ueD2D*[14].mobility.initialY = uniform(340m,350m)

*.ueD2D*[15].mobility.initialX = uniform(280m,320m)
*.ueD2D*[15].mobility.initialY = uniform(280m,350m)

*.ueD2D*[16].mobility.initialX = uniform(230m,270m)
*.ueD2D*[16].mobility.initialY = uniform(220m,270m)

*.ueD2D*[17].mobility.initialX = uniform(275m,325m)
*.ueD2D*[17].mobility.initialY = uniform(275m,320m)

*.ueD2D*[18].mobility.initialX = uniform(290m,310m)
*.ueD2D*[18].mobility.initialY = uniform(310m,350m)

*.ueD2D*[19].mobility.initialX = uniform(270m,290m)
*.ueD2D*[19].mobility.initialY = uniform(340m,350m)

*.ueD2D*[20].mobility.initialX = uniform(380m,400m)
*.ueD2D*[20].mobility.initialY = uniform(380m,400m)

*.ueD2D*[21].mobility.initialX = uniform(200m,210m)
*.ueD2D*[21].mobility.initialY = uniform(200m,250m)

*.ueD2D*[22].mobility.initialX = uniform(250m,300m)
*.ueD2D*[22].mobility.initialY = uniform(200m,250m)

*.ueD2D*[23].mobility.initialX = uniform(340m,380m)
*.ueD2D*[23].mobility.initialY = uniform(300m,380m)

*.ueD2D*[24].mobility.initialX = uniform(250m,310m)
*.ueD2D*[24].mobility.initialY = uniform(250m,310m)
### Traffic configuration ###
*.ueD2D*[1..].numUdpApps = 1

# Traffic between pairs of UEs (e.g. ueD2DTx[0] --> ueD2DRx[0] )
# Transmitters
*.ueD2DTx[1..].udpApp[*].typename = "VoIPSender"
*.ueD2DTx[1..].udpApp[*].localPort = 3088+ancestorIndex(0) 
*.ueD2DTx[1..].udpApp[*].startTime = uniform(0s,0.02s)
*.ueD2DTx[1..].udpApp[*].destAddress = "ueD2DRx[" + string(ancestorIndex(1)) + "]"
*.ueD2DTx[1..].udpApp[*].destPort = 1000
# Receivers
*.ueD2DRx[1..].udpApp[*].typename = "VoIPReceiver"
*.ueD2DRx[1..].udpApp[*].localPort = 1000

*.ueD2D*[0].numTcpApps = ${TCP=0}

############### Statistics ##################
#output-scalar-file = ${resultdir}/${configname}/${scheduler}/${resources}/${numPairs}/${TCP}.sca
#output-vector-file = ${resultdir}/${configname}/${scheduler}/${resources}/${numPairs}/${TCP}.vec

#output-scalar-file = ${resultdir}/${runnumber}.sca
#output-vector-file = ${resultdir}/${runnumber}.vec
seed-set = ${repetition}
**.vector-recording = true


# Traffic between UEs (ueD2DTx[0] --> ueD2DRx[0] etc.)
# Transmitters
*.ueD2DTx[0].tcpApp[*].typename = "TCPSessionApp"
*.ueD2DTx[0].tcpApp[*].connectPort = 1000
*.ueD2DTx[0].tcpApp[*].localPort = 1000
*.ueD2DTx[0].tcpApp[*].sendBytes = 1GiB
*.ueD2DTx[0].tcpApp[*].active = true
*.ueD2DTx[0].tcpApp[*].tOpen = uniform(0.010s,0.1s) 
*.ueD2DTx[0].tcpApp[*].tSend = uniform(0.15s,0.5s) 
*.ueD2DTx[0].tcpApp[*].connectAddress = "ueD2DRx[0]" 
*.ueD2DTx[0].tcpApp[*].localAddress = "ueD2DTx[0]" 

# Receivers
*.ueD2DRx[0].tcpApp[*].typename = "TCPSinkApp"
*.ueD2DRx[0].tcpApp[*].localPort = 1000

**.tcpApp[*].tClose = -1s


# Enable D2D for the eNodeB and the UEs involved in direct communications
*.eNodeB.d2dCapable = true
*.ueD2D*[*].d2dCapable = true
**.amcMode = "D2D"

# --- Set the D2D peering capabilities --- #
#
# For each D2D-capable UE, write a list of UEs (separated by blank spaces)
# representing the possible peering UEs. Note that this relationship is unidirectional
# Here, ueD2DTx[0] --> ueD2DRx[0] , ueD2DTx[1] --> ueD2DRx[1] etc.

*.ueD2DTx[0].nic.d2dPeerAddresses = "ueD2DRx[0]"
*.ueD2DRx[0].nic.d2dPeerAddresses = "ueD2DTx[0]"

*.ueD2DTx[1..].nic.d2dPeerAddresses = "ueD2DRx[" + string(ancestorIndex(1)) + "]"
*.ueD2DRx[1..].nic.d2dPeerAddresses = "ueD2DTx[" + string(ancestorIndex(1)) + "]"

# --- Select CQI for D2D transmissions --- #
#
# To enable the reporting of CQIs for each D2D link, set the parameter *.eNodeB.nic.phy.enableD2DCqiReporting
# To use fixed CQI, set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
*.eNodeB.nic.phy.enableD2DCqiReporting = true
#**.usePreconfiguredTxParams = false
#**.d2dCqi = 7

[Config equalCQI]
extends = MultiplePairs

*.eNodeB.nic.rlc.LteRlcUmType = "LteRlcUm"
*.ue*[*].nic.rlc.LteRlcUmType = "LteRlcUm"
*.eNodeB.nic.LteMacType = "LteMacEnbD2D"
*.ue*[*].nic.LteMacType = "LteMacUeD2D"

**.usePreconfiguredTxParams = true
**.d2dCqi = 7

[Config IM]
extends = MultiplePairs

*.eNodeB.d2dCapable = false
*.ueD2D*.d2dCapable = false
**.**.amcMode = "AUTO"

[Config MultiplePairswithTCP]
extends = MultiplePairs

*.ueD2D*[0].numTcpApps = ${TCPapp=1}

[Config IMwithTCP]
extends = IM

*.ueD2D*[0].numTcpApps = ${TCPapp=1}

[Config onlyTCP]
extends = MultiplePairswithTCP

*.ueD2D*[1..].numUdpApps = 0
*.numUeD2DTx = ${Pairs=1}
*.numUeD2DRx = ${Pairs}

[Config IMonlyTCP]
extends = onlyTCP

*.eNodeB.d2dCapable = false
*.ueD2D*.d2dCapable = false
**.**.amcMode = "AUTO"